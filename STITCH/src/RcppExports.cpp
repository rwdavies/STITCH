// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// query_region
std::string query_region(const std::string& file_name, const std::string& chrom, int32_t p1, int32_t p2);
RcppExport SEXP _STITCH_query_region(SEXP file_nameSEXP, SEXP chromSEXP, SEXP p1SEXP, SEXP p2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file_name(file_nameSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type chrom(chromSEXP);
    Rcpp::traits::input_parameter< int32_t >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< int32_t >::type p2(p2SEXP);
    rcpp_result_gen = Rcpp::wrap(query_region(file_name, chrom, p1, p2));
    return rcpp_result_gen;
END_RCPP
}
// get_header_using_SeqLib
std::string get_header_using_SeqLib(std::string file_name);
RcppExport SEXP _STITCH_get_header_using_SeqLib(SEXP file_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file_name(file_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(get_header_using_SeqLib(file_name));
    return rcpp_result_gen;
END_RCPP
}
// get_read_span
int get_read_span(std::vector<int> cigarLengthVec, std::vector<std::string> cigarTypeVec);
RcppExport SEXP _STITCH_get_read_span(SEXP cigarLengthVecSEXP, SEXP cigarTypeVecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type cigarLengthVec(cigarLengthVecSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type cigarTypeVec(cigarTypeVecSEXP);
    rcpp_result_gen = Rcpp::wrap(get_read_span(cigarLengthVec, cigarTypeVec));
    return rcpp_result_gen;
END_RCPP
}
// cpp_cigar_split_many
Rcpp::List cpp_cigar_split_many(std::vector <std::string> strings);
RcppExport SEXP _STITCH_cpp_cigar_split_many(SEXP stringsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector <std::string> >::type strings(stringsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_cigar_split_many(strings));
    return rcpp_result_gen;
END_RCPP
}
// cpp_deal_with_soft_clipped_bases
Rcpp::List cpp_deal_with_soft_clipped_bases(Rcpp::List splitCigarRead, bool useSoftClippedBases, int posRead, std::string seqRead, std::string qualRead);
RcppExport SEXP _STITCH_cpp_deal_with_soft_clipped_bases(SEXP splitCigarReadSEXP, SEXP useSoftClippedBasesSEXP, SEXP posReadSEXP, SEXP seqReadSEXP, SEXP qualReadSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type splitCigarRead(splitCigarReadSEXP);
    Rcpp::traits::input_parameter< bool >::type useSoftClippedBases(useSoftClippedBasesSEXP);
    Rcpp::traits::input_parameter< int >::type posRead(posReadSEXP);
    Rcpp::traits::input_parameter< std::string >::type seqRead(seqReadSEXP);
    Rcpp::traits::input_parameter< std::string >::type qualRead(qualReadSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_deal_with_soft_clipped_bases(splitCigarRead, useSoftClippedBases, posRead, seqRead, qualRead));
    return rcpp_result_gen;
END_RCPP
}
// get_sample_data_from_SeqLib
Rcpp::List get_sample_data_from_SeqLib(std::string region, std::string file_name, std::string reference);
RcppExport SEXP _STITCH_get_sample_data_from_SeqLib(SEXP regionSEXP, SEXP file_nameSEXP, SEXP referenceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type region(regionSEXP);
    Rcpp::traits::input_parameter< std::string >::type file_name(file_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type reference(referenceSEXP);
    rcpp_result_gen = Rcpp::wrap(get_sample_data_from_SeqLib(region, file_name, reference));
    return rcpp_result_gen;
END_RCPP
}
// get_sampleReadsRaw_from_SeqLib
Rcpp::List get_sampleReadsRaw_from_SeqLib(const bool useSoftClippedBases, const int bqFilter, const int iSizeUpperLimit, const std::vector<std::string>& ref, const std::vector<std::string>& alt, const int nSNPs, const std::vector<int>& L, std::string region, std::string file_name, std::string reference, const bool save_sampleReadsInfo, const bool use_bx_tag);
RcppExport SEXP _STITCH_get_sampleReadsRaw_from_SeqLib(SEXP useSoftClippedBasesSEXP, SEXP bqFilterSEXP, SEXP iSizeUpperLimitSEXP, SEXP refSEXP, SEXP altSEXP, SEXP nSNPsSEXP, SEXP LSEXP, SEXP regionSEXP, SEXP file_nameSEXP, SEXP referenceSEXP, SEXP save_sampleReadsInfoSEXP, SEXP use_bx_tagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const bool >::type useSoftClippedBases(useSoftClippedBasesSEXP);
    Rcpp::traits::input_parameter< const int >::type bqFilter(bqFilterSEXP);
    Rcpp::traits::input_parameter< const int >::type iSizeUpperLimit(iSizeUpperLimitSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type ref(refSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type alt(altSEXP);
    Rcpp::traits::input_parameter< const int >::type nSNPs(nSNPsSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type L(LSEXP);
    Rcpp::traits::input_parameter< std::string >::type region(regionSEXP);
    Rcpp::traits::input_parameter< std::string >::type file_name(file_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type reference(referenceSEXP);
    Rcpp::traits::input_parameter< const bool >::type save_sampleReadsInfo(save_sampleReadsInfoSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_bx_tag(use_bx_tagSEXP);
    rcpp_result_gen = Rcpp::wrap(get_sampleReadsRaw_from_SeqLib(useSoftClippedBases, bqFilter, iSizeUpperLimit, ref, alt, nSNPs, L, region, file_name, reference, save_sampleReadsInfo, use_bx_tag));
    return rcpp_result_gen;
END_RCPP
}
// collapse_diploid_gamma
void collapse_diploid_gamma(arma::mat& gamma_t, arma::mat& gammaK_t, double& prev, const int suppressOutput, std::string& prev_section, std::string& next_section);
RcppExport SEXP _STITCH_collapse_diploid_gamma(SEXP gamma_tSEXP, SEXP gammaK_tSEXP, SEXP prevSEXP, SEXP suppressOutputSEXP, SEXP prev_sectionSEXP, SEXP next_sectionSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type gamma_t(gamma_tSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type gammaK_t(gammaK_tSEXP);
    Rcpp::traits::input_parameter< double& >::type prev(prevSEXP);
    Rcpp::traits::input_parameter< const int >::type suppressOutput(suppressOutputSEXP);
    Rcpp::traits::input_parameter< std::string& >::type prev_section(prev_sectionSEXP);
    Rcpp::traits::input_parameter< std::string& >::type next_section(next_sectionSEXP);
    collapse_diploid_gamma(gamma_t, gammaK_t, prev, suppressOutput, prev_section, next_section);
    return R_NilValue;
END_RCPP
}
// rcpp_make_and_bound_eMatGrid_diploid_t
void rcpp_make_and_bound_eMatGrid_diploid_t(arma::mat& eMatGrid_t, const arma::mat& eMatRead_t, const Rcpp::List& sampleReads, const double& maxEmissionMatrixDifference, double& prev, const int suppressOutput, std::string& prev_section, std::string& next_section, const int run_fb_grid_offset, const bool rescale_eMatGrid_t);
RcppExport SEXP _STITCH_rcpp_make_and_bound_eMatGrid_diploid_t(SEXP eMatGrid_tSEXP, SEXP eMatRead_tSEXP, SEXP sampleReadsSEXP, SEXP maxEmissionMatrixDifferenceSEXP, SEXP prevSEXP, SEXP suppressOutputSEXP, SEXP prev_sectionSEXP, SEXP next_sectionSEXP, SEXP run_fb_grid_offsetSEXP, SEXP rescale_eMatGrid_tSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type eMatGrid_t(eMatGrid_tSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eMatRead_t(eMatRead_tSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type sampleReads(sampleReadsSEXP);
    Rcpp::traits::input_parameter< const double& >::type maxEmissionMatrixDifference(maxEmissionMatrixDifferenceSEXP);
    Rcpp::traits::input_parameter< double& >::type prev(prevSEXP);
    Rcpp::traits::input_parameter< const int >::type suppressOutput(suppressOutputSEXP);
    Rcpp::traits::input_parameter< std::string& >::type prev_section(prev_sectionSEXP);
    Rcpp::traits::input_parameter< std::string& >::type next_section(next_sectionSEXP);
    Rcpp::traits::input_parameter< const int >::type run_fb_grid_offset(run_fb_grid_offsetSEXP);
    Rcpp::traits::input_parameter< const bool >::type rescale_eMatGrid_t(rescale_eMatGrid_tSEXP);
    rcpp_make_and_bound_eMatGrid_diploid_t(eMatGrid_t, eMatRead_t, sampleReads, maxEmissionMatrixDifference, prev, suppressOutput, prev_section, next_section, run_fb_grid_offset, rescale_eMatGrid_t);
    return R_NilValue;
END_RCPP
}
// sample_diploid_path
arma::imat sample_diploid_path(const arma::mat& alphaHat_t, const arma::mat& transMatRate_t_D, const arma::mat& eMatGrid_t, const arma::mat& alphaMat_t, const int T, const int K, const arma::rowvec& c);
RcppExport SEXP _STITCH_sample_diploid_path(SEXP alphaHat_tSEXP, SEXP transMatRate_t_DSEXP, SEXP eMatGrid_tSEXP, SEXP alphaMat_tSEXP, SEXP TSEXP, SEXP KSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type alphaHat_t(alphaHat_tSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type transMatRate_t_D(transMatRate_t_DSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eMatGrid_t(eMatGrid_tSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type alphaMat_t(alphaMat_tSEXP);
    Rcpp::traits::input_parameter< const int >::type T(TSEXP);
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_diploid_path(alphaHat_t, transMatRate_t_D, eMatGrid_t, alphaMat_t, T, K, c));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_make_diploid_jUpdate
void rcpp_make_diploid_jUpdate(arma::cube& alphaMatSum_tc, int s, const arma::mat& alphaHat_t, const arma::mat& betaHat_t, const arma::cube& transMatRate_tc_D, const arma::cube& alphaMatCurrent_tc, const arma::mat& eMatGrid_t, double& prev, const int suppressOutput, std::string& prev_section, std::string& next_section);
RcppExport SEXP _STITCH_rcpp_make_diploid_jUpdate(SEXP alphaMatSum_tcSEXP, SEXP sSEXP, SEXP alphaHat_tSEXP, SEXP betaHat_tSEXP, SEXP transMatRate_tc_DSEXP, SEXP alphaMatCurrent_tcSEXP, SEXP eMatGrid_tSEXP, SEXP prevSEXP, SEXP suppressOutputSEXP, SEXP prev_sectionSEXP, SEXP next_sectionSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube& >::type alphaMatSum_tc(alphaMatSum_tcSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type alphaHat_t(alphaHat_tSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type betaHat_t(betaHat_tSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type transMatRate_tc_D(transMatRate_tc_DSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type alphaMatCurrent_tc(alphaMatCurrent_tcSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eMatGrid_t(eMatGrid_tSEXP);
    Rcpp::traits::input_parameter< double& >::type prev(prevSEXP);
    Rcpp::traits::input_parameter< const int >::type suppressOutput(suppressOutputSEXP);
    Rcpp::traits::input_parameter< std::string& >::type prev_section(prev_sectionSEXP);
    Rcpp::traits::input_parameter< std::string& >::type next_section(next_sectionSEXP);
    rcpp_make_diploid_jUpdate(alphaMatSum_tc, s, alphaHat_t, betaHat_t, transMatRate_tc_D, alphaMatCurrent_tc, eMatGrid_t, prev, suppressOutput, prev_section, next_section);
    return R_NilValue;
END_RCPP
}
// rcpp_calculate_fbd_dosage
void rcpp_calculate_fbd_dosage(arma::mat& genProbs_t, const arma::cube& eHapsCurrent_tc, int s, const arma::mat& gamma_t, const Rcpp::IntegerVector& grid, const int snp_start_1_based, const int snp_end_1_based, double& prev, const int suppressOutput, std::string& prev_section, std::string& next_section, const int grid_offset);
RcppExport SEXP _STITCH_rcpp_calculate_fbd_dosage(SEXP genProbs_tSEXP, SEXP eHapsCurrent_tcSEXP, SEXP sSEXP, SEXP gamma_tSEXP, SEXP gridSEXP, SEXP snp_start_1_basedSEXP, SEXP snp_end_1_basedSEXP, SEXP prevSEXP, SEXP suppressOutputSEXP, SEXP prev_sectionSEXP, SEXP next_sectionSEXP, SEXP grid_offsetSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type genProbs_t(genProbs_tSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type eHapsCurrent_tc(eHapsCurrent_tcSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type gamma_t(gamma_tSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type grid(gridSEXP);
    Rcpp::traits::input_parameter< const int >::type snp_start_1_based(snp_start_1_basedSEXP);
    Rcpp::traits::input_parameter< const int >::type snp_end_1_based(snp_end_1_basedSEXP);
    Rcpp::traits::input_parameter< double& >::type prev(prevSEXP);
    Rcpp::traits::input_parameter< const int >::type suppressOutput(suppressOutputSEXP);
    Rcpp::traits::input_parameter< std::string& >::type prev_section(prev_sectionSEXP);
    Rcpp::traits::input_parameter< std::string& >::type next_section(next_sectionSEXP);
    Rcpp::traits::input_parameter< const int >::type grid_offset(grid_offsetSEXP);
    rcpp_calculate_fbd_dosage(genProbs_t, eHapsCurrent_tc, s, gamma_t, grid, snp_start_1_based, snp_end_1_based, prev, suppressOutput, prev_section, next_section, grid_offset);
    return R_NilValue;
END_RCPP
}
// forwardBackwardDiploid
Rcpp::List forwardBackwardDiploid(const Rcpp::List& sampleReads, const arma::cube& eHapsCurrent_tc, const arma::cube& alphaMatCurrent_tc, const arma::cube& transMatRate_tc_D, const arma::mat& priorCurrent_m, arma::mat& alphaHat_t, arma::mat& betaHat_t, arma::mat& gamma_t, arma::mat& eMatGrid_t, const double maxDifferenceBetweenReads, const double maxEmissionMatrixDifference, const int Jmax, const int suppressOutput, const arma::mat& blocks_for_output, arma::cube& gammaSum0_tc, arma::cube& gammaSum1_tc, arma::cube& alphaMatSum_tc, arma::cube& hapSum_tc, arma::mat& priorSum_m, const Rcpp::List& prev_list_of_alphaBetaBlocks, const int i_snp_block_for_alpha_beta, const bool generate_fb_snp_offsets, const bool return_a_sampled_path, const bool run_fb_subset, const int run_fb_grid_offset, const bool return_genProbs, int snp_start_1_based, int snp_end_1_based, const Rcpp::IntegerVector grid, const bool return_gamma, const bool return_gammaK, const bool return_c, const bool return_extra, const bool update_in_place, const bool pass_in_alphaBeta, const bool output_haplotype_dosages, const bool rescale_eMatGrid_t);
RcppExport SEXP _STITCH_forwardBackwardDiploid(SEXP sampleReadsSEXP, SEXP eHapsCurrent_tcSEXP, SEXP alphaMatCurrent_tcSEXP, SEXP transMatRate_tc_DSEXP, SEXP priorCurrent_mSEXP, SEXP alphaHat_tSEXP, SEXP betaHat_tSEXP, SEXP gamma_tSEXP, SEXP eMatGrid_tSEXP, SEXP maxDifferenceBetweenReadsSEXP, SEXP maxEmissionMatrixDifferenceSEXP, SEXP JmaxSEXP, SEXP suppressOutputSEXP, SEXP blocks_for_outputSEXP, SEXP gammaSum0_tcSEXP, SEXP gammaSum1_tcSEXP, SEXP alphaMatSum_tcSEXP, SEXP hapSum_tcSEXP, SEXP priorSum_mSEXP, SEXP prev_list_of_alphaBetaBlocksSEXP, SEXP i_snp_block_for_alpha_betaSEXP, SEXP generate_fb_snp_offsetsSEXP, SEXP return_a_sampled_pathSEXP, SEXP run_fb_subsetSEXP, SEXP run_fb_grid_offsetSEXP, SEXP return_genProbsSEXP, SEXP snp_start_1_basedSEXP, SEXP snp_end_1_basedSEXP, SEXP gridSEXP, SEXP return_gammaSEXP, SEXP return_gammaKSEXP, SEXP return_cSEXP, SEXP return_extraSEXP, SEXP update_in_placeSEXP, SEXP pass_in_alphaBetaSEXP, SEXP output_haplotype_dosagesSEXP, SEXP rescale_eMatGrid_tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type sampleReads(sampleReadsSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type eHapsCurrent_tc(eHapsCurrent_tcSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type alphaMatCurrent_tc(alphaMatCurrent_tcSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type transMatRate_tc_D(transMatRate_tc_DSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type priorCurrent_m(priorCurrent_mSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type alphaHat_t(alphaHat_tSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type betaHat_t(betaHat_tSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type gamma_t(gamma_tSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type eMatGrid_t(eMatGrid_tSEXP);
    Rcpp::traits::input_parameter< const double >::type maxDifferenceBetweenReads(maxDifferenceBetweenReadsSEXP);
    Rcpp::traits::input_parameter< const double >::type maxEmissionMatrixDifference(maxEmissionMatrixDifferenceSEXP);
    Rcpp::traits::input_parameter< const int >::type Jmax(JmaxSEXP);
    Rcpp::traits::input_parameter< const int >::type suppressOutput(suppressOutputSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type blocks_for_output(blocks_for_outputSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type gammaSum0_tc(gammaSum0_tcSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type gammaSum1_tc(gammaSum1_tcSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type alphaMatSum_tc(alphaMatSum_tcSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type hapSum_tc(hapSum_tcSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type priorSum_m(priorSum_mSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type prev_list_of_alphaBetaBlocks(prev_list_of_alphaBetaBlocksSEXP);
    Rcpp::traits::input_parameter< const int >::type i_snp_block_for_alpha_beta(i_snp_block_for_alpha_betaSEXP);
    Rcpp::traits::input_parameter< const bool >::type generate_fb_snp_offsets(generate_fb_snp_offsetsSEXP);
    Rcpp::traits::input_parameter< const bool >::type return_a_sampled_path(return_a_sampled_pathSEXP);
    Rcpp::traits::input_parameter< const bool >::type run_fb_subset(run_fb_subsetSEXP);
    Rcpp::traits::input_parameter< const int >::type run_fb_grid_offset(run_fb_grid_offsetSEXP);
    Rcpp::traits::input_parameter< const bool >::type return_genProbs(return_genProbsSEXP);
    Rcpp::traits::input_parameter< int >::type snp_start_1_based(snp_start_1_basedSEXP);
    Rcpp::traits::input_parameter< int >::type snp_end_1_based(snp_end_1_basedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type grid(gridSEXP);
    Rcpp::traits::input_parameter< const bool >::type return_gamma(return_gammaSEXP);
    Rcpp::traits::input_parameter< const bool >::type return_gammaK(return_gammaKSEXP);
    Rcpp::traits::input_parameter< const bool >::type return_c(return_cSEXP);
    Rcpp::traits::input_parameter< const bool >::type return_extra(return_extraSEXP);
    Rcpp::traits::input_parameter< const bool >::type update_in_place(update_in_placeSEXP);
    Rcpp::traits::input_parameter< const bool >::type pass_in_alphaBeta(pass_in_alphaBetaSEXP);
    Rcpp::traits::input_parameter< const bool >::type output_haplotype_dosages(output_haplotype_dosagesSEXP);
    Rcpp::traits::input_parameter< const bool >::type rescale_eMatGrid_t(rescale_eMatGrid_tSEXP);
    rcpp_result_gen = Rcpp::wrap(forwardBackwardDiploid(sampleReads, eHapsCurrent_tc, alphaMatCurrent_tc, transMatRate_tc_D, priorCurrent_m, alphaHat_t, betaHat_t, gamma_t, eMatGrid_t, maxDifferenceBetweenReads, maxEmissionMatrixDifference, Jmax, suppressOutput, blocks_for_output, gammaSum0_tc, gammaSum1_tc, alphaMatSum_tc, hapSum_tc, priorSum_m, prev_list_of_alphaBetaBlocks, i_snp_block_for_alpha_beta, generate_fb_snp_offsets, return_a_sampled_path, run_fb_subset, run_fb_grid_offset, return_genProbs, snp_start_1_based, snp_end_1_based, grid, return_gamma, return_gammaK, return_c, return_extra, update_in_place, pass_in_alphaBeta, output_haplotype_dosages, rescale_eMatGrid_t));
    return rcpp_result_gen;
END_RCPP
}
// increment2N
Rcpp::NumericVector increment2N(int yT, int xT, Rcpp::NumericVector y, Rcpp::NumericVector z);
RcppExport SEXP _STITCH_increment2N(SEXP yTSEXP, SEXP xTSEXP, SEXP ySEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type yT(yTSEXP);
    Rcpp::traits::input_parameter< int >::type xT(xTSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(increment2N(yT, xT, y, z));
    return rcpp_result_gen;
END_RCPP
}
// ram_test
Rcpp::List ram_test(const arma::mat& mat1, const Rcpp::NumericMatrix& mat2, arma::mat mat3, Rcpp::NumericMatrix mat4);
RcppExport SEXP _STITCH_ram_test(SEXP mat1SEXP, SEXP mat2SEXP, SEXP mat3SEXP, SEXP mat4SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type mat2(mat2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mat3(mat3SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type mat4(mat4SEXP);
    rcpp_result_gen = Rcpp::wrap(ram_test(mat1, mat2, mat3, mat4));
    return rcpp_result_gen;
END_RCPP
}
// get_min_from_position
void get_min_from_position(const Rcpp::NumericVector& match_vec, const Rcpp::NumericVector& readStart_all, const Rcpp::NumericVector& readEnd_all, Rcpp::NumericVector& readMin, Rcpp::NumericVector& readMax);
RcppExport SEXP _STITCH_get_min_from_position(SEXP match_vecSEXP, SEXP readStart_allSEXP, SEXP readEnd_allSEXP, SEXP readMinSEXP, SEXP readMaxSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type match_vec(match_vecSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type readStart_all(readStart_allSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type readEnd_all(readEnd_allSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type readMin(readMinSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type readMax(readMaxSEXP);
    get_min_from_position(match_vec, readStart_all, readEnd_all, readMin, readMax);
    return R_NilValue;
END_RCPP
}
// get_random_values
Rcpp::NumericVector get_random_values(int N);
RcppExport SEXP _STITCH_get_random_values(SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(get_random_values(N));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_make_fb_snp_offsets
Rcpp::List rcpp_make_fb_snp_offsets(const arma::mat& alphaHat_t, const arma::mat& betaHat_t, const arma::mat& blocks_for_output);
RcppExport SEXP _STITCH_rcpp_make_fb_snp_offsets(SEXP alphaHat_tSEXP, SEXP betaHat_tSEXP, SEXP blocks_for_outputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type alphaHat_t(alphaHat_tSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type betaHat_t(betaHat_tSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type blocks_for_output(blocks_for_outputSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_make_fb_snp_offsets(alphaHat_t, betaHat_t, blocks_for_output));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_evaluate_bxtag
Rcpp::LogicalVector rcpp_evaluate_bxtag(const arma::ivec& qnameInteger_ord, Rcpp::CharacterVector& bxtag_ord);
RcppExport SEXP _STITCH_rcpp_evaluate_bxtag(SEXP qnameInteger_ordSEXP, SEXP bxtag_ordSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::ivec& >::type qnameInteger_ord(qnameInteger_ordSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type bxtag_ord(bxtag_ordSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_evaluate_bxtag(qnameInteger_ord, bxtag_ord));
    return rcpp_result_gen;
END_RCPP
}
// cpp_read_reassign
List cpp_read_reassign(const arma::ivec& ord, const arma::ivec& qnameInteger_ord, const arma::ivec& bxtagInteger_ord, const Rcpp::LogicalVector& bxtag_bad_ord, const Rcpp::CharacterVector& qname, const Rcpp::CharacterVector& bxtag, const Rcpp::CharacterVector& strand, const Rcpp::List& sampleReadsRaw, const arma::ivec& readStart_ord, const arma::ivec& readEnd_ord, const arma::ivec& readStart, const arma::ivec& readEnd, int iSizeUpperLimit, int bxTagUpperLimit, bool use_bx_tag, bool save_sampleReadsInfo, int maxnSNPInRead);
RcppExport SEXP _STITCH_cpp_read_reassign(SEXP ordSEXP, SEXP qnameInteger_ordSEXP, SEXP bxtagInteger_ordSEXP, SEXP bxtag_bad_ordSEXP, SEXP qnameSEXP, SEXP bxtagSEXP, SEXP strandSEXP, SEXP sampleReadsRawSEXP, SEXP readStart_ordSEXP, SEXP readEnd_ordSEXP, SEXP readStartSEXP, SEXP readEndSEXP, SEXP iSizeUpperLimitSEXP, SEXP bxTagUpperLimitSEXP, SEXP use_bx_tagSEXP, SEXP save_sampleReadsInfoSEXP, SEXP maxnSNPInReadSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::ivec& >::type ord(ordSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type qnameInteger_ord(qnameInteger_ordSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type bxtagInteger_ord(bxtagInteger_ordSEXP);
    Rcpp::traits::input_parameter< const Rcpp::LogicalVector& >::type bxtag_bad_ord(bxtag_bad_ordSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type qname(qnameSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type bxtag(bxtagSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type strand(strandSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type sampleReadsRaw(sampleReadsRawSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type readStart_ord(readStart_ordSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type readEnd_ord(readEnd_ordSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type readStart(readStartSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type readEnd(readEndSEXP);
    Rcpp::traits::input_parameter< int >::type iSizeUpperLimit(iSizeUpperLimitSEXP);
    Rcpp::traits::input_parameter< int >::type bxTagUpperLimit(bxTagUpperLimitSEXP);
    Rcpp::traits::input_parameter< bool >::type use_bx_tag(use_bx_tagSEXP);
    Rcpp::traits::input_parameter< bool >::type save_sampleReadsInfo(save_sampleReadsInfoSEXP);
    Rcpp::traits::input_parameter< int >::type maxnSNPInRead(maxnSNPInReadSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_read_reassign(ord, qnameInteger_ord, bxtagInteger_ord, bxtag_bad_ord, qname, bxtag, strand, sampleReadsRaw, readStart_ord, readEnd_ord, readStart, readEnd, iSizeUpperLimit, bxTagUpperLimit, use_bx_tag, save_sampleReadsInfo, maxnSNPInRead));
    return rcpp_result_gen;
END_RCPP
}
// make_gammaEK_t_from_gammaK_t
arma::mat make_gammaEK_t_from_gammaK_t(const arma::mat& gammaK_t, const int K, const Rcpp::IntegerVector& grid, const int snp_start_1_based, const int snp_end_1_based, double& prev, const int suppressOutput, std::string& prev_section, std::string& next_section, const int grid_offset);
RcppExport SEXP _STITCH_make_gammaEK_t_from_gammaK_t(SEXP gammaK_tSEXP, SEXP KSEXP, SEXP gridSEXP, SEXP snp_start_1_basedSEXP, SEXP snp_end_1_basedSEXP, SEXP prevSEXP, SEXP suppressOutputSEXP, SEXP prev_sectionSEXP, SEXP next_sectionSEXP, SEXP grid_offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type gammaK_t(gammaK_tSEXP);
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type grid(gridSEXP);
    Rcpp::traits::input_parameter< const int >::type snp_start_1_based(snp_start_1_basedSEXP);
    Rcpp::traits::input_parameter< const int >::type snp_end_1_based(snp_end_1_basedSEXP);
    Rcpp::traits::input_parameter< double& >::type prev(prevSEXP);
    Rcpp::traits::input_parameter< const int >::type suppressOutput(suppressOutputSEXP);
    Rcpp::traits::input_parameter< std::string& >::type prev_section(prev_sectionSEXP);
    Rcpp::traits::input_parameter< std::string& >::type next_section(next_sectionSEXP);
    Rcpp::traits::input_parameter< const int >::type grid_offset(grid_offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(make_gammaEK_t_from_gammaK_t(gammaK_t, K, grid, snp_start_1_based, snp_end_1_based, prev, suppressOutput, prev_section, next_section, grid_offset));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_run_forward_haploid
void Rcpp_run_forward_haploid(arma::mat& alphaHat_t, arma::rowvec& c, const arma::mat& eMatGrid_t, const arma::cube& alphaMatCurrent_tc, const arma::cube& transMatRate_tc_H, const arma::mat& priorCurrent_m, const int s, const Rcpp::NumericVector alphaStart, bool run_fb_subset, const bool initialize_only);
RcppExport SEXP _STITCH_Rcpp_run_forward_haploid(SEXP alphaHat_tSEXP, SEXP cSEXP, SEXP eMatGrid_tSEXP, SEXP alphaMatCurrent_tcSEXP, SEXP transMatRate_tc_HSEXP, SEXP priorCurrent_mSEXP, SEXP sSEXP, SEXP alphaStartSEXP, SEXP run_fb_subsetSEXP, SEXP initialize_onlySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type alphaHat_t(alphaHat_tSEXP);
    Rcpp::traits::input_parameter< arma::rowvec& >::type c(cSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eMatGrid_t(eMatGrid_tSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type alphaMatCurrent_tc(alphaMatCurrent_tcSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type transMatRate_tc_H(transMatRate_tc_HSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type priorCurrent_m(priorCurrent_mSEXP);
    Rcpp::traits::input_parameter< const int >::type s(sSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type alphaStart(alphaStartSEXP);
    Rcpp::traits::input_parameter< bool >::type run_fb_subset(run_fb_subsetSEXP);
    Rcpp::traits::input_parameter< const bool >::type initialize_only(initialize_onlySEXP);
    Rcpp_run_forward_haploid(alphaHat_t, c, eMatGrid_t, alphaMatCurrent_tc, transMatRate_tc_H, priorCurrent_m, s, alphaStart, run_fb_subset, initialize_only);
    return R_NilValue;
END_RCPP
}
// Rcpp_run_backward_haploid
void Rcpp_run_backward_haploid(arma::mat& betaHat_t, arma::rowvec& c, const arma::mat& eMatGrid_t, const arma::cube& alphaMatCurrent_tc, const arma::cube& transMatRate_tc_H, const int s);
RcppExport SEXP _STITCH_Rcpp_run_backward_haploid(SEXP betaHat_tSEXP, SEXP cSEXP, SEXP eMatGrid_tSEXP, SEXP alphaMatCurrent_tcSEXP, SEXP transMatRate_tc_HSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type betaHat_t(betaHat_tSEXP);
    Rcpp::traits::input_parameter< arma::rowvec& >::type c(cSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eMatGrid_t(eMatGrid_tSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type alphaMatCurrent_tc(alphaMatCurrent_tcSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type transMatRate_tc_H(transMatRate_tc_HSEXP);
    Rcpp::traits::input_parameter< const int >::type s(sSEXP);
    Rcpp_run_backward_haploid(betaHat_t, c, eMatGrid_t, alphaMatCurrent_tc, transMatRate_tc_H, s);
    return R_NilValue;
END_RCPP
}
// rcpp_make_eMatRead_t
void rcpp_make_eMatRead_t(arma::mat& eMatRead_t, const Rcpp::List& sampleReads, const arma::cube& eHapsCurrent_tc, const int s, const double maxDifferenceBetweenReads, const int Jmax, arma::mat& eMatHapOri_t, const arma::vec& pRgivenH1, const arma::vec& pRgivenH2, double& prev, int suppressOutput, std::string& prev_section, std::string& next_section, const bool run_pseudo_haploid, const bool rescale_eMatRead_t);
RcppExport SEXP _STITCH_rcpp_make_eMatRead_t(SEXP eMatRead_tSEXP, SEXP sampleReadsSEXP, SEXP eHapsCurrent_tcSEXP, SEXP sSEXP, SEXP maxDifferenceBetweenReadsSEXP, SEXP JmaxSEXP, SEXP eMatHapOri_tSEXP, SEXP pRgivenH1SEXP, SEXP pRgivenH2SEXP, SEXP prevSEXP, SEXP suppressOutputSEXP, SEXP prev_sectionSEXP, SEXP next_sectionSEXP, SEXP run_pseudo_haploidSEXP, SEXP rescale_eMatRead_tSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type eMatRead_t(eMatRead_tSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type sampleReads(sampleReadsSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type eHapsCurrent_tc(eHapsCurrent_tcSEXP);
    Rcpp::traits::input_parameter< const int >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double >::type maxDifferenceBetweenReads(maxDifferenceBetweenReadsSEXP);
    Rcpp::traits::input_parameter< const int >::type Jmax(JmaxSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type eMatHapOri_t(eMatHapOri_tSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pRgivenH1(pRgivenH1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pRgivenH2(pRgivenH2SEXP);
    Rcpp::traits::input_parameter< double& >::type prev(prevSEXP);
    Rcpp::traits::input_parameter< int >::type suppressOutput(suppressOutputSEXP);
    Rcpp::traits::input_parameter< std::string& >::type prev_section(prev_sectionSEXP);
    Rcpp::traits::input_parameter< std::string& >::type next_section(next_sectionSEXP);
    Rcpp::traits::input_parameter< const bool >::type run_pseudo_haploid(run_pseudo_haploidSEXP);
    Rcpp::traits::input_parameter< const bool >::type rescale_eMatRead_t(rescale_eMatRead_tSEXP);
    rcpp_make_eMatRead_t(eMatRead_t, sampleReads, eHapsCurrent_tc, s, maxDifferenceBetweenReads, Jmax, eMatHapOri_t, pRgivenH1, pRgivenH2, prev, suppressOutput, prev_section, next_section, run_pseudo_haploid, rescale_eMatRead_t);
    return R_NilValue;
END_RCPP
}
// rcpp_make_eMatGrid_t
void rcpp_make_eMatGrid_t(arma::mat& eMatGrid_t, const arma::mat& eMatRead_t, const Rcpp::IntegerVector& H, const Rcpp::List sampleReads, const int hap, const int nGrids, double& prev, int suppressOutput, std::string& prev_section, std::string& next_section, const int run_fb_grid_offset, const bool use_all_reads, const bool bound, const double maxEmissionMatrixDifference, const bool rescale);
RcppExport SEXP _STITCH_rcpp_make_eMatGrid_t(SEXP eMatGrid_tSEXP, SEXP eMatRead_tSEXP, SEXP HSEXP, SEXP sampleReadsSEXP, SEXP hapSEXP, SEXP nGridsSEXP, SEXP prevSEXP, SEXP suppressOutputSEXP, SEXP prev_sectionSEXP, SEXP next_sectionSEXP, SEXP run_fb_grid_offsetSEXP, SEXP use_all_readsSEXP, SEXP boundSEXP, SEXP maxEmissionMatrixDifferenceSEXP, SEXP rescaleSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type eMatGrid_t(eMatGrid_tSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eMatRead_t(eMatRead_tSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type H(HSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type sampleReads(sampleReadsSEXP);
    Rcpp::traits::input_parameter< const int >::type hap(hapSEXP);
    Rcpp::traits::input_parameter< const int >::type nGrids(nGridsSEXP);
    Rcpp::traits::input_parameter< double& >::type prev(prevSEXP);
    Rcpp::traits::input_parameter< int >::type suppressOutput(suppressOutputSEXP);
    Rcpp::traits::input_parameter< std::string& >::type prev_section(prev_sectionSEXP);
    Rcpp::traits::input_parameter< std::string& >::type next_section(next_sectionSEXP);
    Rcpp::traits::input_parameter< const int >::type run_fb_grid_offset(run_fb_grid_offsetSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_all_reads(use_all_readsSEXP);
    Rcpp::traits::input_parameter< const bool >::type bound(boundSEXP);
    Rcpp::traits::input_parameter< const double >::type maxEmissionMatrixDifference(maxEmissionMatrixDifferenceSEXP);
    Rcpp::traits::input_parameter< const bool >::type rescale(rescaleSEXP);
    rcpp_make_eMatGrid_t(eMatGrid_t, eMatRead_t, H, sampleReads, hap, nGrids, prev, suppressOutput, prev_section, next_section, run_fb_grid_offset, use_all_reads, bound, maxEmissionMatrixDifference, rescale);
    return R_NilValue;
END_RCPP
}
// make_haploid_gammaUpdate_t
void make_haploid_gammaUpdate_t(int s, arma::cube& gammaSum0_tc, arma::cube& gammaSum1_tc, const Rcpp::List& sampleReads, const arma::mat& gamma_t, const arma::cube& eHapsCurrent_tc, const arma::mat& eMatRead_t, const arma::mat& eMatHapOri_t, const arma::vec& pRgivenH1, const arma::vec& pRgivenH2, const bool run_pseudo_haploid);
RcppExport SEXP _STITCH_make_haploid_gammaUpdate_t(SEXP sSEXP, SEXP gammaSum0_tcSEXP, SEXP gammaSum1_tcSEXP, SEXP sampleReadsSEXP, SEXP gamma_tSEXP, SEXP eHapsCurrent_tcSEXP, SEXP eMatRead_tSEXP, SEXP eMatHapOri_tSEXP, SEXP pRgivenH1SEXP, SEXP pRgivenH2SEXP, SEXP run_pseudo_haploidSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type gammaSum0_tc(gammaSum0_tcSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type gammaSum1_tc(gammaSum1_tcSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type sampleReads(sampleReadsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type gamma_t(gamma_tSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type eHapsCurrent_tc(eHapsCurrent_tcSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eMatRead_t(eMatRead_tSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eMatHapOri_t(eMatHapOri_tSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pRgivenH1(pRgivenH1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pRgivenH2(pRgivenH2SEXP);
    Rcpp::traits::input_parameter< const bool >::type run_pseudo_haploid(run_pseudo_haploidSEXP);
    make_haploid_gammaUpdate_t(s, gammaSum0_tc, gammaSum1_tc, sampleReads, gamma_t, eHapsCurrent_tc, eMatRead_t, eMatHapOri_t, pRgivenH1, pRgivenH2, run_pseudo_haploid);
    return R_NilValue;
END_RCPP
}
// rcpp_calculate_hapDosage
arma::rowvec rcpp_calculate_hapDosage(const arma::cube& eHapsCurrent_tc, const int s, const arma::mat& gamma_t, const Rcpp::IntegerVector& grid, const int snp_start_1_based, const int snp_end_1_based, const int run_fb_grid_offset);
RcppExport SEXP _STITCH_rcpp_calculate_hapDosage(SEXP eHapsCurrent_tcSEXP, SEXP sSEXP, SEXP gamma_tSEXP, SEXP gridSEXP, SEXP snp_start_1_basedSEXP, SEXP snp_end_1_basedSEXP, SEXP run_fb_grid_offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type eHapsCurrent_tc(eHapsCurrent_tcSEXP);
    Rcpp::traits::input_parameter< const int >::type s(sSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type gamma_t(gamma_tSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type grid(gridSEXP);
    Rcpp::traits::input_parameter< const int >::type snp_start_1_based(snp_start_1_basedSEXP);
    Rcpp::traits::input_parameter< const int >::type snp_end_1_based(snp_end_1_basedSEXP);
    Rcpp::traits::input_parameter< const int >::type run_fb_grid_offset(run_fb_grid_offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_calculate_hapDosage(eHapsCurrent_tc, s, gamma_t, grid, snp_start_1_based, snp_end_1_based, run_fb_grid_offset));
    return rcpp_result_gen;
END_RCPP
}
// pseudoHaploid_update_model_9
Rcpp::List pseudoHaploid_update_model_9(const arma::mat& pRgivenH1_m, const arma::mat& pRgivenH2_m, const Rcpp::List& list_of_eMatRead_t1, const Rcpp::List& list_of_eMatRead_t2, const Rcpp::List& list_of_gamma_t1, const Rcpp::List& list_of_gamma_t2, const int K, const arma::ivec& srp);
RcppExport SEXP _STITCH_pseudoHaploid_update_model_9(SEXP pRgivenH1_mSEXP, SEXP pRgivenH2_mSEXP, SEXP list_of_eMatRead_t1SEXP, SEXP list_of_eMatRead_t2SEXP, SEXP list_of_gamma_t1SEXP, SEXP list_of_gamma_t2SEXP, SEXP KSEXP, SEXP srpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type pRgivenH1_m(pRgivenH1_mSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type pRgivenH2_m(pRgivenH2_mSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type list_of_eMatRead_t1(list_of_eMatRead_t1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type list_of_eMatRead_t2(list_of_eMatRead_t2SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type list_of_gamma_t1(list_of_gamma_t1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type list_of_gamma_t2(list_of_gamma_t2SEXP);
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type srp(srpSEXP);
    rcpp_result_gen = Rcpp::wrap(pseudoHaploid_update_model_9(pRgivenH1_m, pRgivenH2_m, list_of_eMatRead_t1, list_of_eMatRead_t2, list_of_gamma_t1, list_of_gamma_t2, K, srp));
    return rcpp_result_gen;
END_RCPP
}
// forwardBackwardHaploid
Rcpp::List forwardBackwardHaploid(const Rcpp::List& sampleReads, const arma::cube& eHapsCurrent_tc, const arma::cube& alphaMatCurrent_tc, const arma::cube& transMatRate_tc_H, const arma::mat& priorCurrent_m, arma::mat& alphaHat_t, arma::mat& betaHat_t, arma::mat& gamma_t, arma::mat& eMatGrid_t, const double maxDifferenceBetweenReads, const double maxEmissionMatrixDifference, const int Jmax, const int suppressOutput, const int model, arma::cube& gammaSum0_tc, arma::cube& gammaSum1_tc, arma::cube& alphaMatSum_tc, arma::cube& hapSum_tc, arma::mat& priorSum_m, const arma::mat& pRgivenH1_m, const arma::mat& pRgivenH2_m, const bool run_pseudo_haploid, const arma::mat& blocks_for_output, const Rcpp::List& prev_list_of_alphaBetaBlocks, const int i_snp_block_for_alpha_beta, const bool generate_fb_snp_offsets, const bool run_fb_subset, const int run_fb_grid_offset, const bool return_extra, const bool return_gamma, const bool return_gammaK, const bool return_hapDosage, const bool update_in_place, const bool pass_in_alphaBeta, const bool output_haplotype_dosages, int snp_start_1_based, int snp_end_1_based, const Rcpp::IntegerVector grid, const bool rescale_eMatGrid_t);
RcppExport SEXP _STITCH_forwardBackwardHaploid(SEXP sampleReadsSEXP, SEXP eHapsCurrent_tcSEXP, SEXP alphaMatCurrent_tcSEXP, SEXP transMatRate_tc_HSEXP, SEXP priorCurrent_mSEXP, SEXP alphaHat_tSEXP, SEXP betaHat_tSEXP, SEXP gamma_tSEXP, SEXP eMatGrid_tSEXP, SEXP maxDifferenceBetweenReadsSEXP, SEXP maxEmissionMatrixDifferenceSEXP, SEXP JmaxSEXP, SEXP suppressOutputSEXP, SEXP modelSEXP, SEXP gammaSum0_tcSEXP, SEXP gammaSum1_tcSEXP, SEXP alphaMatSum_tcSEXP, SEXP hapSum_tcSEXP, SEXP priorSum_mSEXP, SEXP pRgivenH1_mSEXP, SEXP pRgivenH2_mSEXP, SEXP run_pseudo_haploidSEXP, SEXP blocks_for_outputSEXP, SEXP prev_list_of_alphaBetaBlocksSEXP, SEXP i_snp_block_for_alpha_betaSEXP, SEXP generate_fb_snp_offsetsSEXP, SEXP run_fb_subsetSEXP, SEXP run_fb_grid_offsetSEXP, SEXP return_extraSEXP, SEXP return_gammaSEXP, SEXP return_gammaKSEXP, SEXP return_hapDosageSEXP, SEXP update_in_placeSEXP, SEXP pass_in_alphaBetaSEXP, SEXP output_haplotype_dosagesSEXP, SEXP snp_start_1_basedSEXP, SEXP snp_end_1_basedSEXP, SEXP gridSEXP, SEXP rescale_eMatGrid_tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type sampleReads(sampleReadsSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type eHapsCurrent_tc(eHapsCurrent_tcSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type alphaMatCurrent_tc(alphaMatCurrent_tcSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type transMatRate_tc_H(transMatRate_tc_HSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type priorCurrent_m(priorCurrent_mSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type alphaHat_t(alphaHat_tSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type betaHat_t(betaHat_tSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type gamma_t(gamma_tSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type eMatGrid_t(eMatGrid_tSEXP);
    Rcpp::traits::input_parameter< const double >::type maxDifferenceBetweenReads(maxDifferenceBetweenReadsSEXP);
    Rcpp::traits::input_parameter< const double >::type maxEmissionMatrixDifference(maxEmissionMatrixDifferenceSEXP);
    Rcpp::traits::input_parameter< const int >::type Jmax(JmaxSEXP);
    Rcpp::traits::input_parameter< const int >::type suppressOutput(suppressOutputSEXP);
    Rcpp::traits::input_parameter< const int >::type model(modelSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type gammaSum0_tc(gammaSum0_tcSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type gammaSum1_tc(gammaSum1_tcSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type alphaMatSum_tc(alphaMatSum_tcSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type hapSum_tc(hapSum_tcSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type priorSum_m(priorSum_mSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type pRgivenH1_m(pRgivenH1_mSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type pRgivenH2_m(pRgivenH2_mSEXP);
    Rcpp::traits::input_parameter< const bool >::type run_pseudo_haploid(run_pseudo_haploidSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type blocks_for_output(blocks_for_outputSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type prev_list_of_alphaBetaBlocks(prev_list_of_alphaBetaBlocksSEXP);
    Rcpp::traits::input_parameter< const int >::type i_snp_block_for_alpha_beta(i_snp_block_for_alpha_betaSEXP);
    Rcpp::traits::input_parameter< const bool >::type generate_fb_snp_offsets(generate_fb_snp_offsetsSEXP);
    Rcpp::traits::input_parameter< const bool >::type run_fb_subset(run_fb_subsetSEXP);
    Rcpp::traits::input_parameter< const int >::type run_fb_grid_offset(run_fb_grid_offsetSEXP);
    Rcpp::traits::input_parameter< const bool >::type return_extra(return_extraSEXP);
    Rcpp::traits::input_parameter< const bool >::type return_gamma(return_gammaSEXP);
    Rcpp::traits::input_parameter< const bool >::type return_gammaK(return_gammaKSEXP);
    Rcpp::traits::input_parameter< const bool >::type return_hapDosage(return_hapDosageSEXP);
    Rcpp::traits::input_parameter< const bool >::type update_in_place(update_in_placeSEXP);
    Rcpp::traits::input_parameter< const bool >::type pass_in_alphaBeta(pass_in_alphaBetaSEXP);
    Rcpp::traits::input_parameter< const bool >::type output_haplotype_dosages(output_haplotype_dosagesSEXP);
    Rcpp::traits::input_parameter< int >::type snp_start_1_based(snp_start_1_basedSEXP);
    Rcpp::traits::input_parameter< int >::type snp_end_1_based(snp_end_1_basedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type grid(gridSEXP);
    Rcpp::traits::input_parameter< const bool >::type rescale_eMatGrid_t(rescale_eMatGrid_tSEXP);
    rcpp_result_gen = Rcpp::wrap(forwardBackwardHaploid(sampleReads, eHapsCurrent_tc, alphaMatCurrent_tc, transMatRate_tc_H, priorCurrent_m, alphaHat_t, betaHat_t, gamma_t, eMatGrid_t, maxDifferenceBetweenReads, maxEmissionMatrixDifference, Jmax, suppressOutput, model, gammaSum0_tc, gammaSum1_tc, alphaMatSum_tc, hapSum_tc, priorSum_m, pRgivenH1_m, pRgivenH2_m, run_pseudo_haploid, blocks_for_output, prev_list_of_alphaBetaBlocks, i_snp_block_for_alpha_beta, generate_fb_snp_offsets, run_fb_subset, run_fb_grid_offset, return_extra, return_gamma, return_gammaK, return_hapDosage, update_in_place, pass_in_alphaBeta, output_haplotype_dosages, snp_start_1_based, snp_end_1_based, grid, rescale_eMatGrid_t));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_sample_path
arma::ivec rcpp_sample_path(const arma::rowvec read_labels, const arma::mat eMatRead_t, const Rcpp::List& sampleReads, const double maxDifferenceBetweenReads, const int Jmax, const arma::mat& priorCurrent_m, const arma::cube& transMatRate_tc_H, const arma::cube& alphaMatCurrent_tc, const int s);
RcppExport SEXP _STITCH_rcpp_sample_path(SEXP read_labelsSEXP, SEXP eMatRead_tSEXP, SEXP sampleReadsSEXP, SEXP maxDifferenceBetweenReadsSEXP, SEXP JmaxSEXP, SEXP priorCurrent_mSEXP, SEXP transMatRate_tc_HSEXP, SEXP alphaMatCurrent_tcSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::rowvec >::type read_labels(read_labelsSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type eMatRead_t(eMatRead_tSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type sampleReads(sampleReadsSEXP);
    Rcpp::traits::input_parameter< const double >::type maxDifferenceBetweenReads(maxDifferenceBetweenReadsSEXP);
    Rcpp::traits::input_parameter< const int >::type Jmax(JmaxSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type priorCurrent_m(priorCurrent_mSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type transMatRate_tc_H(transMatRate_tc_HSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type alphaMatCurrent_tc(alphaMatCurrent_tcSEXP);
    Rcpp::traits::input_parameter< const int >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_sample_path(read_labels, eMatRead_t, sampleReads, maxDifferenceBetweenReads, Jmax, priorCurrent_m, transMatRate_tc_H, alphaMatCurrent_tc, s));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_determine_where_to_stop
int rcpp_determine_where_to_stop(const Rcpp::NumericVector& smoothed_rate, const Rcpp::LogicalVector& available, int& snp_best, double& thresh, int& nGrids, bool is_left);
RcppExport SEXP _STITCH_rcpp_determine_where_to_stop(SEXP smoothed_rateSEXP, SEXP availableSEXP, SEXP snp_bestSEXP, SEXP threshSEXP, SEXP nGridsSEXP, SEXP is_leftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type smoothed_rate(smoothed_rateSEXP);
    Rcpp::traits::input_parameter< const Rcpp::LogicalVector& >::type available(availableSEXP);
    Rcpp::traits::input_parameter< int& >::type snp_best(snp_bestSEXP);
    Rcpp::traits::input_parameter< double& >::type thresh(threshSEXP);
    Rcpp::traits::input_parameter< int& >::type nGrids(nGridsSEXP);
    Rcpp::traits::input_parameter< bool >::type is_left(is_leftSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_determine_where_to_stop(smoothed_rate, available, snp_best, thresh, nGrids, is_left));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_make_smoothed_rate
Rcpp::NumericVector rcpp_make_smoothed_rate(const Rcpp::NumericVector& sigma_rate, const Rcpp::IntegerVector& L_grid, const int shuffle_bin_radius, const bool verbose);
RcppExport SEXP _STITCH_rcpp_make_smoothed_rate(SEXP sigma_rateSEXP, SEXP L_gridSEXP, SEXP shuffle_bin_radiusSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type sigma_rate(sigma_rateSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type L_grid(L_gridSEXP);
    Rcpp::traits::input_parameter< const int >::type shuffle_bin_radius(shuffle_bin_radiusSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_make_smoothed_rate(sigma_rate, L_grid, shuffle_bin_radius, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_calculate_hwe_p
Rcpp::NumericVector rcpp_calculate_hwe_p(const Rcpp::NumericVector reference_hap);
RcppExport SEXP _STITCH_rcpp_calculate_hwe_p(SEXP reference_hapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type reference_hap(reference_hapSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_calculate_hwe_p(reference_hap));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_phase_sample_paths_method_3
NumericMatrix rcpp_phase_sample_paths_method_3(arma::cube& alphaMatCurrent_tc, arma::cube& transMatRate_tc_H, NumericMatrix alphaHat_t, NumericMatrix betaHat_t, NumericMatrix gamma_t, NumericMatrix eMatGrid_t, NumericVector c, int phasing_n_votes, arma::cube unifs_tc);
RcppExport SEXP _STITCH_rcpp_phase_sample_paths_method_3(SEXP alphaMatCurrent_tcSEXP, SEXP transMatRate_tc_HSEXP, SEXP alphaHat_tSEXP, SEXP betaHat_tSEXP, SEXP gamma_tSEXP, SEXP eMatGrid_tSEXP, SEXP cSEXP, SEXP phasing_n_votesSEXP, SEXP unifs_tcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube& >::type alphaMatCurrent_tc(alphaMatCurrent_tcSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type transMatRate_tc_H(transMatRate_tc_HSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type alphaHat_t(alphaHat_tSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type betaHat_t(betaHat_tSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type gamma_t(gamma_tSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type eMatGrid_t(eMatGrid_tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type c(cSEXP);
    Rcpp::traits::input_parameter< int >::type phasing_n_votes(phasing_n_votesSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type unifs_tc(unifs_tcSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_phase_sample_paths_method_3(alphaMatCurrent_tc, transMatRate_tc_H, alphaHat_t, betaHat_t, gamma_t, eMatGrid_t, c, phasing_n_votes, unifs_tc));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_rhb_reader_chunk_process
void Rcpp_rhb_reader_chunk_process(Rcpp::IntegerMatrix& rhb, arma::imat& hold, Rcpp::StringVector& chunk, int& chunk_length, int& start_snp, int& end_snp, Rcpp::IntegerVector& bs, Rcpp::IntegerVector& ihold, Rcpp::IntegerVector& haps_to_get, int& final_snp_to_get, int& n_haps, Rcpp::LogicalVector& binary_get_line, arma::mat& ref_alleleCount, arma::ivec& rh_in_L, Rcpp::LogicalVector& final_snp_gotten);
RcppExport SEXP _STITCH_Rcpp_rhb_reader_chunk_process(SEXP rhbSEXP, SEXP holdSEXP, SEXP chunkSEXP, SEXP chunk_lengthSEXP, SEXP start_snpSEXP, SEXP end_snpSEXP, SEXP bsSEXP, SEXP iholdSEXP, SEXP haps_to_getSEXP, SEXP final_snp_to_getSEXP, SEXP n_hapsSEXP, SEXP binary_get_lineSEXP, SEXP ref_alleleCountSEXP, SEXP rh_in_LSEXP, SEXP final_snp_gottenSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix& >::type rhb(rhbSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type hold(holdSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector& >::type chunk(chunkSEXP);
    Rcpp::traits::input_parameter< int& >::type chunk_length(chunk_lengthSEXP);
    Rcpp::traits::input_parameter< int& >::type start_snp(start_snpSEXP);
    Rcpp::traits::input_parameter< int& >::type end_snp(end_snpSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type bs(bsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type ihold(iholdSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type haps_to_get(haps_to_getSEXP);
    Rcpp::traits::input_parameter< int& >::type final_snp_to_get(final_snp_to_getSEXP);
    Rcpp::traits::input_parameter< int& >::type n_haps(n_hapsSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type binary_get_line(binary_get_lineSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type ref_alleleCount(ref_alleleCountSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type rh_in_L(rh_in_LSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type final_snp_gotten(final_snp_gottenSEXP);
    Rcpp_rhb_reader_chunk_process(rhb, hold, chunk, chunk_length, start_snp, end_snp, bs, ihold, haps_to_get, final_snp_to_get, n_haps, binary_get_line, ref_alleleCount, rh_in_L, final_snp_gotten);
    return R_NilValue;
END_RCPP
}
// rcpp_int_expand
Rcpp::IntegerVector rcpp_int_expand(arma::ivec& hapc, int nSNPs);
RcppExport SEXP _STITCH_rcpp_int_expand(SEXP hapcSEXP, SEXP nSNPsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::ivec& >::type hapc(hapcSEXP);
    Rcpp::traits::input_parameter< int >::type nSNPs(nSNPsSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_int_expand(hapc, nSNPs));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_int_contract
Rcpp::IntegerVector rcpp_int_contract(arma::ivec& hap);
RcppExport SEXP _STITCH_rcpp_int_contract(SEXP hapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::ivec& >::type hap(hapSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_int_contract(hap));
    return rcpp_result_gen;
END_RCPP
}
// calc_dist_between_rhb_t_and_hap
arma::colvec calc_dist_between_rhb_t_and_hap(arma::imat& rhb_t, arma::vec& hap, int nSNPs);
RcppExport SEXP _STITCH_calc_dist_between_rhb_t_and_hap(SEXP rhb_tSEXP, SEXP hapSEXP, SEXP nSNPsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::imat& >::type rhb_t(rhb_tSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hap(hapSEXP);
    Rcpp::traits::input_parameter< int >::type nSNPs(nSNPsSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_dist_between_rhb_t_and_hap(rhb_t, hap, nSNPs));
    return rcpp_result_gen;
END_RCPP
}
// inflate_fhb_t
arma::imat inflate_fhb_t(arma::imat& rhb_t, Rcpp::IntegerVector& haps_to_get, int nSNPs);
RcppExport SEXP _STITCH_inflate_fhb_t(SEXP rhb_tSEXP, SEXP haps_to_getSEXP, SEXP nSNPsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::imat& >::type rhb_t(rhb_tSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type haps_to_get(haps_to_getSEXP);
    Rcpp::traits::input_parameter< int >::type nSNPs(nSNPsSEXP);
    rcpp_result_gen = Rcpp::wrap(inflate_fhb_t(rhb_t, haps_to_get, nSNPs));
    return rcpp_result_gen;
END_RCPP
}
// inflate_fhb_t_in_place
void inflate_fhb_t_in_place(arma::imat& rhb_t, arma::cube& rhi_t_subset, Rcpp::IntegerVector& haps_to_get, int nSNPs, double ref_error);
RcppExport SEXP _STITCH_inflate_fhb_t_in_place(SEXP rhb_tSEXP, SEXP rhi_t_subsetSEXP, SEXP haps_to_getSEXP, SEXP nSNPsSEXP, SEXP ref_errorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::imat& >::type rhb_t(rhb_tSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type rhi_t_subset(rhi_t_subsetSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type haps_to_get(haps_to_getSEXP);
    Rcpp::traits::input_parameter< int >::type nSNPs(nSNPsSEXP);
    Rcpp::traits::input_parameter< double >::type ref_error(ref_errorSEXP);
    inflate_fhb_t_in_place(rhb_t, rhi_t_subset, haps_to_get, nSNPs, ref_error);
    return R_NilValue;
END_RCPP
}
// inflate_fhb
arma::imat inflate_fhb(arma::imat& rhb, Rcpp::IntegerVector& haps_to_get, int nSNPs);
RcppExport SEXP _STITCH_inflate_fhb(SEXP rhbSEXP, SEXP haps_to_getSEXP, SEXP nSNPsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::imat& >::type rhb(rhbSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type haps_to_get(haps_to_getSEXP);
    Rcpp::traits::input_parameter< int >::type nSNPs(nSNPsSEXP);
    rcpp_result_gen = Rcpp::wrap(inflate_fhb(rhb, haps_to_get, nSNPs));
    return rcpp_result_gen;
END_RCPP
}
// get_rhb_from_vcf
List get_rhb_from_vcf(std::string vcffile, std::string region, std::string samples, bool is_check);
RcppExport SEXP _STITCH_get_rhb_from_vcf(SEXP vcffileSEXP, SEXP regionSEXP, SEXP samplesSEXP, SEXP is_checkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type vcffile(vcffileSEXP);
    Rcpp::traits::input_parameter< std::string >::type region(regionSEXP);
    Rcpp::traits::input_parameter< std::string >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< bool >::type is_check(is_checkSEXP);
    rcpp_result_gen = Rcpp::wrap(get_rhb_from_vcf(vcffile, region, samples, is_check));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_get_hap_info_from_vcf
List Rcpp_get_hap_info_from_vcf(std::string vcffile, double af_cutoff, std::string region, std::string samples, bool is_check, bool verbose);
RcppExport SEXP _STITCH_Rcpp_get_hap_info_from_vcf(SEXP vcffileSEXP, SEXP af_cutoffSEXP, SEXP regionSEXP, SEXP samplesSEXP, SEXP is_checkSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type vcffile(vcffileSEXP);
    Rcpp::traits::input_parameter< double >::type af_cutoff(af_cutoffSEXP);
    Rcpp::traits::input_parameter< std::string >::type region(regionSEXP);
    Rcpp::traits::input_parameter< std::string >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< bool >::type is_check(is_checkSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_get_hap_info_from_vcf(vcffile, af_cutoff, region, samples, is_check, verbose));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_ref_run_forward_haploid
void Rcpp_ref_run_forward_haploid(arma::mat& alphaHat_t, arma::rowvec& c, const arma::mat& eMatGrid_t, const arma::cube& alphaMatCurrentX_tc, const arma::cube& transMatRate_tc_H, const arma::mat& priorCurrent_m, const int s);
RcppExport SEXP _STITCH_Rcpp_ref_run_forward_haploid(SEXP alphaHat_tSEXP, SEXP cSEXP, SEXP eMatGrid_tSEXP, SEXP alphaMatCurrentX_tcSEXP, SEXP transMatRate_tc_HSEXP, SEXP priorCurrent_mSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type alphaHat_t(alphaHat_tSEXP);
    Rcpp::traits::input_parameter< arma::rowvec& >::type c(cSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eMatGrid_t(eMatGrid_tSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type alphaMatCurrentX_tc(alphaMatCurrentX_tcSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type transMatRate_tc_H(transMatRate_tc_HSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type priorCurrent_m(priorCurrent_mSEXP);
    Rcpp::traits::input_parameter< const int >::type s(sSEXP);
    Rcpp_ref_run_forward_haploid(alphaHat_t, c, eMatGrid_t, alphaMatCurrentX_tc, transMatRate_tc_H, priorCurrent_m, s);
    return R_NilValue;
END_RCPP
}
// Rcpp_ref_run_backward_haploid
void Rcpp_ref_run_backward_haploid(arma::mat& betaHat_t, arma::rowvec& c, const arma::mat& eMatGrid_t, const arma::cube& alphaMatCurrentX_tc, const arma::cube& transMatRate_tc_H, arma::cube& alphaMatSum_tc, const int s);
RcppExport SEXP _STITCH_Rcpp_ref_run_backward_haploid(SEXP betaHat_tSEXP, SEXP cSEXP, SEXP eMatGrid_tSEXP, SEXP alphaMatCurrentX_tcSEXP, SEXP transMatRate_tc_HSEXP, SEXP alphaMatSum_tcSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type betaHat_t(betaHat_tSEXP);
    Rcpp::traits::input_parameter< arma::rowvec& >::type c(cSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eMatGrid_t(eMatGrid_tSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type alphaMatCurrentX_tc(alphaMatCurrentX_tcSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type transMatRate_tc_H(transMatRate_tc_HSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type alphaMatSum_tc(alphaMatSum_tcSEXP);
    Rcpp::traits::input_parameter< const int >::type s(sSEXP);
    Rcpp_ref_run_backward_haploid(betaHat_t, c, eMatGrid_t, alphaMatCurrentX_tc, transMatRate_tc_H, alphaMatSum_tc, s);
    return R_NilValue;
END_RCPP
}
// rcpp_make_sampleReads_from_hap
Rcpp::List rcpp_make_sampleReads_from_hap(const Rcpp::IntegerVector rh_in_L, const int reference_phred, const Rcpp::IntegerVector reference_hap);
RcppExport SEXP _STITCH_rcpp_make_sampleReads_from_hap(SEXP rh_in_LSEXP, SEXP reference_phredSEXP, SEXP reference_hapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type rh_in_L(rh_in_LSEXP);
    Rcpp::traits::input_parameter< const int >::type reference_phred(reference_phredSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type reference_hap(reference_hapSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_make_sampleReads_from_hap(rh_in_L, reference_phred, reference_hap));
    return rcpp_result_gen;
END_RCPP
}
// ref_make_ehh
void ref_make_ehh(const arma::cube& eHapsCurrent_tc, arma::cube& ehh_h1_S, arma::cube& ehh_h1_D, arma::cube& ehh_h0_S, arma::cube& ehh_h0_D, double reference_phred);
RcppExport SEXP _STITCH_ref_make_ehh(SEXP eHapsCurrent_tcSEXP, SEXP ehh_h1_SSEXP, SEXP ehh_h1_DSEXP, SEXP ehh_h0_SSEXP, SEXP ehh_h0_DSEXP, SEXP reference_phredSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type eHapsCurrent_tc(eHapsCurrent_tcSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type ehh_h1_S(ehh_h1_SSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type ehh_h1_D(ehh_h1_DSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type ehh_h0_S(ehh_h0_SSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type ehh_h0_D(ehh_h0_DSEXP);
    Rcpp::traits::input_parameter< double >::type reference_phred(reference_phredSEXP);
    ref_make_ehh(eHapsCurrent_tc, ehh_h1_S, ehh_h1_D, ehh_h0_S, ehh_h0_D, reference_phred);
    return R_NilValue;
END_RCPP
}
// rcpp_ref_bound_eMatGrid_t
void rcpp_ref_bound_eMatGrid_t(arma::mat& eMatGrid_t, const double maxEmissionMatrixDifference, bool rescale, bool bound);
RcppExport SEXP _STITCH_rcpp_ref_bound_eMatGrid_t(SEXP eMatGrid_tSEXP, SEXP maxEmissionMatrixDifferenceSEXP, SEXP rescaleSEXP, SEXP boundSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type eMatGrid_t(eMatGrid_tSEXP);
    Rcpp::traits::input_parameter< const double >::type maxEmissionMatrixDifference(maxEmissionMatrixDifferenceSEXP);
    Rcpp::traits::input_parameter< bool >::type rescale(rescaleSEXP);
    Rcpp::traits::input_parameter< bool >::type bound(boundSEXP);
    rcpp_ref_bound_eMatGrid_t(eMatGrid_t, maxEmissionMatrixDifference, rescale, bound);
    return R_NilValue;
END_RCPP
}
// rcpp_ref_make_eMatGrid_t
void rcpp_ref_make_eMatGrid_t(arma::mat& eMatGrid_t, Rcpp::IntegerVector& reference_hap, const Rcpp::IntegerVector& rh_in_L, const arma::cube& eHapsCurrent_tc, const Rcpp::IntegerVector& grid, const int reference_phred, const int s, const double maxEmissionMatrixDifference, arma::cube& ehh_h1_S, arma::cube& ehh_h0_S, const bool rescale, const bool bound);
RcppExport SEXP _STITCH_rcpp_ref_make_eMatGrid_t(SEXP eMatGrid_tSEXP, SEXP reference_hapSEXP, SEXP rh_in_LSEXP, SEXP eHapsCurrent_tcSEXP, SEXP gridSEXP, SEXP reference_phredSEXP, SEXP sSEXP, SEXP maxEmissionMatrixDifferenceSEXP, SEXP ehh_h1_SSEXP, SEXP ehh_h0_SSEXP, SEXP rescaleSEXP, SEXP boundSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type eMatGrid_t(eMatGrid_tSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type reference_hap(reference_hapSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type rh_in_L(rh_in_LSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type eHapsCurrent_tc(eHapsCurrent_tcSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type grid(gridSEXP);
    Rcpp::traits::input_parameter< const int >::type reference_phred(reference_phredSEXP);
    Rcpp::traits::input_parameter< const int >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double >::type maxEmissionMatrixDifference(maxEmissionMatrixDifferenceSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type ehh_h1_S(ehh_h1_SSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type ehh_h0_S(ehh_h0_SSEXP);
    Rcpp::traits::input_parameter< const bool >::type rescale(rescaleSEXP);
    Rcpp::traits::input_parameter< const bool >::type bound(boundSEXP);
    rcpp_ref_make_eMatGrid_t(eMatGrid_t, reference_hap, rh_in_L, eHapsCurrent_tc, grid, reference_phred, s, maxEmissionMatrixDifference, ehh_h1_S, ehh_h0_S, rescale, bound);
    return R_NilValue;
END_RCPP
}
// ref_make_haploid_gammaUpdate_t
void ref_make_haploid_gammaUpdate_t(int s, arma::cube& gammaSum0_tc, arma::cube& gammaSum1_tc, const arma::mat& gamma_t, const arma::cube& eHapsCurrent_tc, const Rcpp::IntegerVector& reference_hap, const Rcpp::IntegerVector& rh_in_L, const Rcpp::IntegerVector& grid, const double reference_phred, arma::cube& ehh_h1_D, arma::cube& ehh_h0_D);
RcppExport SEXP _STITCH_ref_make_haploid_gammaUpdate_t(SEXP sSEXP, SEXP gammaSum0_tcSEXP, SEXP gammaSum1_tcSEXP, SEXP gamma_tSEXP, SEXP eHapsCurrent_tcSEXP, SEXP reference_hapSEXP, SEXP rh_in_LSEXP, SEXP gridSEXP, SEXP reference_phredSEXP, SEXP ehh_h1_DSEXP, SEXP ehh_h0_DSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type gammaSum0_tc(gammaSum0_tcSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type gammaSum1_tc(gammaSum1_tcSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type gamma_t(gamma_tSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type eHapsCurrent_tc(eHapsCurrent_tcSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type reference_hap(reference_hapSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type rh_in_L(rh_in_LSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type grid(gridSEXP);
    Rcpp::traits::input_parameter< const double >::type reference_phred(reference_phredSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type ehh_h1_D(ehh_h1_DSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type ehh_h0_D(ehh_h0_DSEXP);
    ref_make_haploid_gammaUpdate_t(s, gammaSum0_tc, gammaSum1_tc, gamma_t, eHapsCurrent_tc, reference_hap, rh_in_L, grid, reference_phred, ehh_h1_D, ehh_h0_D);
    return R_NilValue;
END_RCPP
}
// reference_fbh
Rcpp::List reference_fbh(const arma::cube& eHapsCurrent_tc, const arma::cube& alphaMatCurrentX_tc, const arma::cube& transMatRate_tc_H, const arma::mat& priorCurrent_m, arma::mat& alphaHat_t, arma::mat& betaHat_t, arma::mat& gamma_t, arma::mat& eMatGrid_t, arma::cube& ehh_h1_S, arma::cube& ehh_h1_D, arma::cube& ehh_h0_S, arma::cube& ehh_h0_D, const double maxDifferenceBetweenReads, const double maxEmissionMatrixDifference, int suppressOutput, Rcpp::IntegerVector& reference_hap, const Rcpp::IntegerVector& rh_in_L, const double reference_phred, arma::cube& gammaSum0_tc, arma::cube& gammaSum1_tc, arma::cube& alphaMatSum_tc, arma::cube& hapSum_tc, arma::mat& priorSum_m, const Rcpp::List& list_of_break_results, Rcpp::List& list_of_fromMat, Rcpp::List& list_of_fbd_store, const Rcpp::IntegerVector& nbreaks, const bool save_fbd_store, const int iSample1, const int pshaM, const bool return_extra, const bool return_gammaK, const Rcpp::IntegerVector grid, const bool rescale_eMatGrid_t, const bool bound_eMatGrid_t, const bool run_fb_subset);
RcppExport SEXP _STITCH_reference_fbh(SEXP eHapsCurrent_tcSEXP, SEXP alphaMatCurrentX_tcSEXP, SEXP transMatRate_tc_HSEXP, SEXP priorCurrent_mSEXP, SEXP alphaHat_tSEXP, SEXP betaHat_tSEXP, SEXP gamma_tSEXP, SEXP eMatGrid_tSEXP, SEXP ehh_h1_SSEXP, SEXP ehh_h1_DSEXP, SEXP ehh_h0_SSEXP, SEXP ehh_h0_DSEXP, SEXP maxDifferenceBetweenReadsSEXP, SEXP maxEmissionMatrixDifferenceSEXP, SEXP suppressOutputSEXP, SEXP reference_hapSEXP, SEXP rh_in_LSEXP, SEXP reference_phredSEXP, SEXP gammaSum0_tcSEXP, SEXP gammaSum1_tcSEXP, SEXP alphaMatSum_tcSEXP, SEXP hapSum_tcSEXP, SEXP priorSum_mSEXP, SEXP list_of_break_resultsSEXP, SEXP list_of_fromMatSEXP, SEXP list_of_fbd_storeSEXP, SEXP nbreaksSEXP, SEXP save_fbd_storeSEXP, SEXP iSample1SEXP, SEXP pshaMSEXP, SEXP return_extraSEXP, SEXP return_gammaKSEXP, SEXP gridSEXP, SEXP rescale_eMatGrid_tSEXP, SEXP bound_eMatGrid_tSEXP, SEXP run_fb_subsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type eHapsCurrent_tc(eHapsCurrent_tcSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type alphaMatCurrentX_tc(alphaMatCurrentX_tcSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type transMatRate_tc_H(transMatRate_tc_HSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type priorCurrent_m(priorCurrent_mSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type alphaHat_t(alphaHat_tSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type betaHat_t(betaHat_tSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type gamma_t(gamma_tSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type eMatGrid_t(eMatGrid_tSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type ehh_h1_S(ehh_h1_SSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type ehh_h1_D(ehh_h1_DSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type ehh_h0_S(ehh_h0_SSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type ehh_h0_D(ehh_h0_DSEXP);
    Rcpp::traits::input_parameter< const double >::type maxDifferenceBetweenReads(maxDifferenceBetweenReadsSEXP);
    Rcpp::traits::input_parameter< const double >::type maxEmissionMatrixDifference(maxEmissionMatrixDifferenceSEXP);
    Rcpp::traits::input_parameter< int >::type suppressOutput(suppressOutputSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type reference_hap(reference_hapSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type rh_in_L(rh_in_LSEXP);
    Rcpp::traits::input_parameter< const double >::type reference_phred(reference_phredSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type gammaSum0_tc(gammaSum0_tcSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type gammaSum1_tc(gammaSum1_tcSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type alphaMatSum_tc(alphaMatSum_tcSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type hapSum_tc(hapSum_tcSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type priorSum_m(priorSum_mSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type list_of_break_results(list_of_break_resultsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type list_of_fromMat(list_of_fromMatSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type list_of_fbd_store(list_of_fbd_storeSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type nbreaks(nbreaksSEXP);
    Rcpp::traits::input_parameter< const bool >::type save_fbd_store(save_fbd_storeSEXP);
    Rcpp::traits::input_parameter< const int >::type iSample1(iSample1SEXP);
    Rcpp::traits::input_parameter< const int >::type pshaM(pshaMSEXP);
    Rcpp::traits::input_parameter< const bool >::type return_extra(return_extraSEXP);
    Rcpp::traits::input_parameter< const bool >::type return_gammaK(return_gammaKSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type grid(gridSEXP);
    Rcpp::traits::input_parameter< const bool >::type rescale_eMatGrid_t(rescale_eMatGrid_tSEXP);
    Rcpp::traits::input_parameter< const bool >::type bound_eMatGrid_t(bound_eMatGrid_tSEXP);
    Rcpp::traits::input_parameter< const bool >::type run_fb_subset(run_fb_subsetSEXP);
    rcpp_result_gen = Rcpp::wrap(reference_fbh(eHapsCurrent_tc, alphaMatCurrentX_tc, transMatRate_tc_H, priorCurrent_m, alphaHat_t, betaHat_t, gamma_t, eMatGrid_t, ehh_h1_S, ehh_h1_D, ehh_h0_S, ehh_h0_D, maxDifferenceBetweenReads, maxEmissionMatrixDifference, suppressOutput, reference_hap, rh_in_L, reference_phred, gammaSum0_tc, gammaSum1_tc, alphaMatSum_tc, hapSum_tc, priorSum_m, list_of_break_results, list_of_fromMat, list_of_fbd_store, nbreaks, save_fbd_store, iSample1, pshaM, return_extra, return_gammaK, grid, rescale_eMatGrid_t, bound_eMatGrid_t, run_fb_subset));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_make_alphaMatSumX_tc
void rcpp_make_alphaMatSumX_tc(arma::cube& alphaMatCurrent_tc, arma::cube& alphaMatCurrentX_tc, arma::cube& transMatRate_tc_H);
RcppExport SEXP _STITCH_rcpp_make_alphaMatSumX_tc(SEXP alphaMatCurrent_tcSEXP, SEXP alphaMatCurrentX_tcSEXP, SEXP transMatRate_tc_HSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube& >::type alphaMatCurrent_tc(alphaMatCurrent_tcSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type alphaMatCurrentX_tc(alphaMatCurrentX_tcSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type transMatRate_tc_H(transMatRate_tc_HSEXP);
    rcpp_make_alphaMatSumX_tc(alphaMatCurrent_tc, alphaMatCurrentX_tc, transMatRate_tc_H);
    return R_NilValue;
END_RCPP
}
// rcpp_finalize_alphaMatSum_tc
void rcpp_finalize_alphaMatSum_tc(arma::cube& alphaMatSum_tc, arma::cube& transMatRate_tc_H, arma::cube& alphaMatCurrentX_tc);
RcppExport SEXP _STITCH_rcpp_finalize_alphaMatSum_tc(SEXP alphaMatSum_tcSEXP, SEXP transMatRate_tc_HSEXP, SEXP alphaMatCurrentX_tcSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube& >::type alphaMatSum_tc(alphaMatSum_tcSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type transMatRate_tc_H(transMatRate_tc_HSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type alphaMatCurrentX_tc(alphaMatCurrentX_tcSEXP);
    rcpp_finalize_alphaMatSum_tc(alphaMatSum_tc, transMatRate_tc_H, alphaMatCurrentX_tc);
    return R_NilValue;
END_RCPP
}
// test_eHaps_options
arma::rowvec test_eHaps_options(const arma::cube& cube_eHaps_t, const Rcpp::List& list_of_eHaps_t, const arma::mat& gamma_t, const arma::mat& eHaps_input, const std::string option, const int nSNPs, const int K, const int S);
RcppExport SEXP _STITCH_test_eHaps_options(SEXP cube_eHaps_tSEXP, SEXP list_of_eHaps_tSEXP, SEXP gamma_tSEXP, SEXP eHaps_inputSEXP, SEXP optionSEXP, SEXP nSNPsSEXP, SEXP KSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type cube_eHaps_t(cube_eHaps_tSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type list_of_eHaps_t(list_of_eHaps_tSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type gamma_t(gamma_tSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eHaps_input(eHaps_inputSEXP);
    Rcpp::traits::input_parameter< const std::string >::type option(optionSEXP);
    Rcpp::traits::input_parameter< const int >::type nSNPs(nSNPsSEXP);
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(test_eHaps_options(cube_eHaps_t, list_of_eHaps_t, gamma_t, eHaps_input, option, nSNPs, K, S));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_make_column_of_vcf
Rcpp::StringVector rcpp_make_column_of_vcf(const arma::mat& gp_t, const bool use_read_proportions, const bool use_state_probabilities, const bool add_x_2_cols, const arma::mat& read_proportions, const arma::mat& q_t, const arma::mat& x_t);
RcppExport SEXP _STITCH_rcpp_make_column_of_vcf(SEXP gp_tSEXP, SEXP use_read_proportionsSEXP, SEXP use_state_probabilitiesSEXP, SEXP add_x_2_colsSEXP, SEXP read_proportionsSEXP, SEXP q_tSEXP, SEXP x_tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type gp_t(gp_tSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_read_proportions(use_read_proportionsSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_state_probabilities(use_state_probabilitiesSEXP);
    Rcpp::traits::input_parameter< const bool >::type add_x_2_cols(add_x_2_colsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type read_proportions(read_proportionsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type q_t(q_tSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x_t(x_tSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_make_column_of_vcf(gp_t, use_read_proportions, use_state_probabilities, add_x_2_cols, read_proportions, q_t, x_t));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_STITCH_query_region", (DL_FUNC) &_STITCH_query_region, 4},
    {"_STITCH_get_header_using_SeqLib", (DL_FUNC) &_STITCH_get_header_using_SeqLib, 1},
    {"_STITCH_get_read_span", (DL_FUNC) &_STITCH_get_read_span, 2},
    {"_STITCH_cpp_cigar_split_many", (DL_FUNC) &_STITCH_cpp_cigar_split_many, 1},
    {"_STITCH_cpp_deal_with_soft_clipped_bases", (DL_FUNC) &_STITCH_cpp_deal_with_soft_clipped_bases, 5},
    {"_STITCH_get_sample_data_from_SeqLib", (DL_FUNC) &_STITCH_get_sample_data_from_SeqLib, 3},
    {"_STITCH_get_sampleReadsRaw_from_SeqLib", (DL_FUNC) &_STITCH_get_sampleReadsRaw_from_SeqLib, 12},
    {"_STITCH_collapse_diploid_gamma", (DL_FUNC) &_STITCH_collapse_diploid_gamma, 6},
    {"_STITCH_rcpp_make_and_bound_eMatGrid_diploid_t", (DL_FUNC) &_STITCH_rcpp_make_and_bound_eMatGrid_diploid_t, 10},
    {"_STITCH_sample_diploid_path", (DL_FUNC) &_STITCH_sample_diploid_path, 7},
    {"_STITCH_rcpp_make_diploid_jUpdate", (DL_FUNC) &_STITCH_rcpp_make_diploid_jUpdate, 11},
    {"_STITCH_rcpp_calculate_fbd_dosage", (DL_FUNC) &_STITCH_rcpp_calculate_fbd_dosage, 12},
    {"_STITCH_forwardBackwardDiploid", (DL_FUNC) &_STITCH_forwardBackwardDiploid, 37},
    {"_STITCH_increment2N", (DL_FUNC) &_STITCH_increment2N, 4},
    {"_STITCH_ram_test", (DL_FUNC) &_STITCH_ram_test, 4},
    {"_STITCH_get_min_from_position", (DL_FUNC) &_STITCH_get_min_from_position, 5},
    {"_STITCH_get_random_values", (DL_FUNC) &_STITCH_get_random_values, 1},
    {"_STITCH_rcpp_make_fb_snp_offsets", (DL_FUNC) &_STITCH_rcpp_make_fb_snp_offsets, 3},
    {"_STITCH_rcpp_evaluate_bxtag", (DL_FUNC) &_STITCH_rcpp_evaluate_bxtag, 2},
    {"_STITCH_cpp_read_reassign", (DL_FUNC) &_STITCH_cpp_read_reassign, 17},
    {"_STITCH_make_gammaEK_t_from_gammaK_t", (DL_FUNC) &_STITCH_make_gammaEK_t_from_gammaK_t, 10},
    {"_STITCH_Rcpp_run_forward_haploid", (DL_FUNC) &_STITCH_Rcpp_run_forward_haploid, 10},
    {"_STITCH_Rcpp_run_backward_haploid", (DL_FUNC) &_STITCH_Rcpp_run_backward_haploid, 6},
    {"_STITCH_rcpp_make_eMatRead_t", (DL_FUNC) &_STITCH_rcpp_make_eMatRead_t, 15},
    {"_STITCH_rcpp_make_eMatGrid_t", (DL_FUNC) &_STITCH_rcpp_make_eMatGrid_t, 15},
    {"_STITCH_make_haploid_gammaUpdate_t", (DL_FUNC) &_STITCH_make_haploid_gammaUpdate_t, 11},
    {"_STITCH_rcpp_calculate_hapDosage", (DL_FUNC) &_STITCH_rcpp_calculate_hapDosage, 7},
    {"_STITCH_pseudoHaploid_update_model_9", (DL_FUNC) &_STITCH_pseudoHaploid_update_model_9, 8},
    {"_STITCH_forwardBackwardHaploid", (DL_FUNC) &_STITCH_forwardBackwardHaploid, 39},
    {"_STITCH_rcpp_sample_path", (DL_FUNC) &_STITCH_rcpp_sample_path, 9},
    {"_STITCH_rcpp_determine_where_to_stop", (DL_FUNC) &_STITCH_rcpp_determine_where_to_stop, 6},
    {"_STITCH_rcpp_make_smoothed_rate", (DL_FUNC) &_STITCH_rcpp_make_smoothed_rate, 4},
    {"_STITCH_rcpp_calculate_hwe_p", (DL_FUNC) &_STITCH_rcpp_calculate_hwe_p, 1},
    {"_STITCH_rcpp_phase_sample_paths_method_3", (DL_FUNC) &_STITCH_rcpp_phase_sample_paths_method_3, 9},
    {"_STITCH_Rcpp_rhb_reader_chunk_process", (DL_FUNC) &_STITCH_Rcpp_rhb_reader_chunk_process, 15},
    {"_STITCH_rcpp_int_expand", (DL_FUNC) &_STITCH_rcpp_int_expand, 2},
    {"_STITCH_rcpp_int_contract", (DL_FUNC) &_STITCH_rcpp_int_contract, 1},
    {"_STITCH_calc_dist_between_rhb_t_and_hap", (DL_FUNC) &_STITCH_calc_dist_between_rhb_t_and_hap, 3},
    {"_STITCH_inflate_fhb_t", (DL_FUNC) &_STITCH_inflate_fhb_t, 3},
    {"_STITCH_inflate_fhb_t_in_place", (DL_FUNC) &_STITCH_inflate_fhb_t_in_place, 5},
    {"_STITCH_inflate_fhb", (DL_FUNC) &_STITCH_inflate_fhb, 3},
    {"_STITCH_get_rhb_from_vcf", (DL_FUNC) &_STITCH_get_rhb_from_vcf, 4},
    {"_STITCH_Rcpp_get_hap_info_from_vcf", (DL_FUNC) &_STITCH_Rcpp_get_hap_info_from_vcf, 6},
    {"_STITCH_Rcpp_ref_run_forward_haploid", (DL_FUNC) &_STITCH_Rcpp_ref_run_forward_haploid, 7},
    {"_STITCH_Rcpp_ref_run_backward_haploid", (DL_FUNC) &_STITCH_Rcpp_ref_run_backward_haploid, 7},
    {"_STITCH_rcpp_make_sampleReads_from_hap", (DL_FUNC) &_STITCH_rcpp_make_sampleReads_from_hap, 3},
    {"_STITCH_ref_make_ehh", (DL_FUNC) &_STITCH_ref_make_ehh, 6},
    {"_STITCH_rcpp_ref_bound_eMatGrid_t", (DL_FUNC) &_STITCH_rcpp_ref_bound_eMatGrid_t, 4},
    {"_STITCH_rcpp_ref_make_eMatGrid_t", (DL_FUNC) &_STITCH_rcpp_ref_make_eMatGrid_t, 12},
    {"_STITCH_ref_make_haploid_gammaUpdate_t", (DL_FUNC) &_STITCH_ref_make_haploid_gammaUpdate_t, 11},
    {"_STITCH_reference_fbh", (DL_FUNC) &_STITCH_reference_fbh, 36},
    {"_STITCH_rcpp_make_alphaMatSumX_tc", (DL_FUNC) &_STITCH_rcpp_make_alphaMatSumX_tc, 3},
    {"_STITCH_rcpp_finalize_alphaMatSum_tc", (DL_FUNC) &_STITCH_rcpp_finalize_alphaMatSum_tc, 3},
    {"_STITCH_test_eHaps_options", (DL_FUNC) &_STITCH_test_eHaps_options, 8},
    {"_STITCH_rcpp_make_column_of_vcf", (DL_FUNC) &_STITCH_rcpp_make_column_of_vcf, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_STITCH(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
